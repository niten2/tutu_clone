= link_to "Вернуться назад", root_path
br
h4.center Описание действий работы над проектом:
br
ul
  li Создал новое rails-приложение.
  li Используя scaffolding создал ресурс RailwayStation.
  li Используя scaffolding создал ресурс Train, который имеет номер в качестве атрибута.
ul
  li Создал ресурс Маршруты (Routes), для которого возможны все CRUD-операции.
  li Маршрут имеет название, есть валидация на наличие этого атрибута.
  li Создал ресурс вручную, без ипользования скаффолдинга и других генераторов.
ul
  li Модель Маршрут имеет множество станций.
  li Станция может принадлежать множеству маршрутов.
  li Поезд может иметь один маршрут, на одном маршруте может быть несколько поездов
  li Билет содержит информацию о (связан с) поезде, начальной и конечной станциями.
  li Билет принадлежит пользователю.
  li Пользователь может иметь произвольное кол-во билетов.
  li Поезд содержит информацию о билетах на него.
  li Реализован пользовательских интерфейс для создания маршрутов и добавления станций в него.
ul
  li Сделан вывод списка станций, используя анонимные partials.
  li Сделано то же самое для списка поездов.
  li Через layout добавлены на все страницы футер, содержащий информацию об авторе.
  li Создан интерфейс для создания/удаления/изменения маршрутов.
  li Из интерфейса есть возможность назначать маршрут поезду из списка доступных маршрутов.
  li При просмотре поезда, видно его маршрут или значение “Маршрут не назначен”
  li При просмотре маршрута выводится список поездов на этом маршруте.
  li Реализована возможность управления вагонами: При добавлении вагона указывается поезд, к которому он добавляется Тип вагона (купейный/плацкартный) Кол-во мест: Нижних / Верхних
  li При просмотре поезда, отображается информация о кол-ве вагонов: Плацкартных / Купейных и кол-ве мест: Плацкартных верхних/нижних, Купейных верхних/нижних.
  li Создана ветка, реализован следюущий функционал:
  li Интерфейс просмотра списка проданных билетов. Можно выполнять все стандартные CRUD операции с билетами.
  li При создании (или редактировании) билета нужно указать начальную и конечную станции, а также ФИО пассажира (без ассоциации с моделью User)
ul
  li Добавил возможность указать порядковый номер станции в маршруте (поле для сортировки). Учел, что одна и та же станция может входить в разные маршруты и иметь разный порядковый номер в разных маршрутах.
  li Вывести список станций в маршруте по порядковому номеру (использовал скоуп)
  li Реализовал через STI следующие типы вагонов:
  li Купейный (имеет верхние и нижние места)
  li Плацкартный (имеет верхние/нижние места + боковые верхние и нижние)
  li СВ (имеет только нижние места)
  li Сидячий (имеет только сидячие места)
  li При добавлении вагона к поезду, автоматически назначается вагону порядковый номер (использовал коллбеки). Проверяется уникальность номера вагона у поезда. Не может быть ситуации, когда у поезда 2 вагона с номером 11.
  li На странице просмотра поезда вывел список номеров вагонов (как ссылки). При переходе по ссылке на конкретный вагон показывать тип вагона и актуальную информацию по нем (кол-во верхних/нижних мест, если есть - боковые и т.п. в зависимости от типа вагона)
  li У поезда сделал флаг - сортировка вагона. Значения: с головы/c хвоста поезда. Если выбран вариант “с головы поезда”, то вагоны на странице поезда выводятся в прямом порядке, если “с хвоста поезда” - в обратном.
  li Используя AR Query Interface, реализовал метод в модели Train, который принимает в качестве аргумента тип вагона и тип мест (верхние/нижние/cидячие) и вовзращает их общее кол-во для поезда (т.е. считает по всем вагонам указанного типа).
ul
  li Реализована сортировка станций в маршруте.
  li Изменил добавление вагонов на вложенные ресурсы.
  li Добавил время прибытия и отправления для каждой станции в маршруте
  li Сделал страницу поиска билетов на поезд:
  li Пользователь выбирает из списка начальную и конечную станцию. Выбирает можно из всех станций, которые есть в системе. Система произвоидт поиск маршрутов по выбранному направлению и предоставляет пользователю список поездов, которые следуют по данному маршруту. Пользователь видит время отправления от начальной станции и время прибытия на конечную. У пользователя есть возможность “купить” билет на поезд. Это кнопка “Купить” рядом с соответсвующим поездом. При нажатии на нее, запрашивается ФИО пассажира для билета, данные паспорта и создается билет, связанный с пользователем и содержащий нужную информацию, после чего билет показывается пользователю. Реализована “покупка” билета через вложенные ресурсы (ресурс билет вложен в ресурс пользователь).
ul
  li Подключил аутентификацию через Devise
  li Разделил приложение на пользовательскую и административную части. В административную часть имеет доступ только пользователи с правами администратора.
  li При покупке билета, билет привязыватется к купившему его пользователю (залогиненному), при этом, id пользователя не передается в параметрах запроса или полях формы, в т.ч. скрытых
  li Залогиненный пользователь может посмотреть список всех своих купленных билетов, каждый билет в отдельности, а также удалить билет
  li Администратор может просматривать список всех билетов в системе, каждый в отдельности, редактировать билеты и удалять их.
  li При регистрации пользователя запрашивается его имя и фамилию и после входа, выводится “Привет, <имя пользователя>!”
  li После успешного входа, перенаправляются обычные пользователи на страницу поиска билетов, а админов - на страницу, где перечислены ссылки на управление ресурсами приложения
ul
  li Добавил локализацию devise в проект
  li Локализовал сообщения об ошибках
  li Локализовал все формы в приложении
  li Добавил Twitter Bootstrap, стилизовал внешний вид приложения.
ul
  li Добавил индексы на все внешние ключи и другие поля, по которым происходит поиск в БД
  li Реализовал отправку письма пользователю при покупке билета
  li Реализовал просмотр списка билетов, купленных пользователем
  li Реализовал возможность отмены покупки билета. Если пользователь купил билет, то он может удалить его на странице просмотра списка билетов.
  li При отмене покупки билета, пользователю высылается уведомление об этом на email.
  li Развернул приложение на heroku
= link_to "Вернуться назад", root_path
br
br
br
